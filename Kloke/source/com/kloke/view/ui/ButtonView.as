package com.kloke.view.ui{	import com.kloke.model.interfaces.IButtonStyle;	import com.kloke.model.interfaces.IObserver;	import com.kloke.util.debug.Debug;		import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.text.TextField;	public class ButtonView extends Sprite implements IObserver	{				private var _id:String;		private var _overState:Sprite;		private var _outState:Sprite;		private var _disabledState:Sprite;		        private var _isDown:Boolean;        private var _enabled:Boolean=true;        private var _selected:Boolean;                        public var target:String;                        		public function ButtonView()		{						Debug.log('ButtonView instantiated: '+name)	                                   try{           		           		_overState		= this['over_state'];            	_outState		= this['out_state'];            	_disabledState	= this['disable_state'];            	_overState.visible = false;            	_disabledState.visible = false;                            	Debug.log("ButtonView display assets setup successfully!")            	            	            }catch(e:*){            	Debug.error("ButtonView display assets not Found: "+this+' '+name)            }                       buttonMode       = true;            mouseChildren    = false;                        addEventListener(MouseEvent.MOUSE_OVER,overHandler)            addEventListener(MouseEvent.MOUSE_OUT,outHandler)                        _id = name;								}		public function get overState():Sprite{       return _overState }		public function get outState():Sprite{        return _outState  }        public function get disabledState():Sprite{   return _disabledState}                        public function set enabled(bool:Boolean):void{        	_enabled =bool;        	if(_enabled){        		buttonMode=false;        		_disabledState.visible = true;        		_overState.visible = false;        		_outState.visible = false        		removeEventListener(MouseEvent.MOUSE_OVER,overHandler)                removeEventListener(MouseEvent.MOUSE_OUT,outHandler)        		        	}else{        		buttonMode = true;        		_disabledState.visible = false;                _overState.visible = false;                _outState.visible = true                addEventListener(MouseEvent.MOUSE_OVER,overHandler)                addEventListener(MouseEvent.MOUSE_OUT,outHandler)        		        	}        }                public function get selected():Boolean{            return _selected        }        public function set selected(bool:Boolean):void{            _selected = bool;          // Debug.log(name+' selected: '+_selected)            if(_selected){            	buttonMode = false;                _disabledState.visible = false;                _overState.visible = true;                _outState.visible = false            	removeEventListener(MouseEvent.MOUSE_OVER,overHandler)                removeEventListener(MouseEvent.MOUSE_OUT,outHandler)            }else{            	buttonMode = true;                _disabledState.visible = false;                _overState.visible = false;                _outState.visible = true            	addEventListener(MouseEvent.MOUSE_OVER,overHandler)                addEventListener(MouseEvent.MOUSE_OUT,outHandler)            }        }        private function overHandler(e:MouseEvent):void{        	        	   _overState.visible = true;        	        	        }        private function outHandler(e:MouseEvent):void{        	        		_overState.visible = false;        	                    }        private function clickHandler(e:MouseEvent):void{                  }        public function update(data:Object=null):void{        	        }                public function get id():String{            return _id        }        public function set id(str:String):void{            _id= str        }        public function set label(str:String):void{        	TextField(_overState['label']).text = str;        	TextField(_outState['label']).text = str;        	TextField(_disabledState['label']).text = str;          }        public function applyStyle(style:IButtonStyle):void{        	        	TextField(_overState['label']).defaultTextFormat       = style.overStyle;        	TextField(_outState['label']).defaultTextFormat        = style.outStyle;            TextField(_disabledState['label']).defaultTextFormat   = style.disableStyle;                        TextField(_overState['label']).embedFonts = true;            TextField(_outState['label']).embedFonts = true;            TextField(_disabledState['label']).embedFonts = true;                                }                			}}