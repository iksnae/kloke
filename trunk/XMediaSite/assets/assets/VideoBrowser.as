package assets {				import caurina.transitions.Tweener;		import com.iksnae.xmedia.control.event.SearchYouTubeEvent;	import com.kloke.model.types.VideoDataObject;	import com.kloke.util.debug.Debug;		import fl.containers.UILoader;	import fl.controls.DataGrid;	import fl.controls.TextInput;	import fl.controls.dataGridClasses.DataGridColumn;	import fl.data.DataProvider;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.TextField;		public class VideoBrowser extends MovieClip{				// Constants:		// Public Properties:		// Private Properties:		// UI Elements:		public var data_grid:DataGrid;		public var search_txt:TextInput;		public var search_btn:MovieClip;		public var status_txt:TextField;		public var spinner:MovieClip		public var player:UILoader						///		private var videoColumn:DataGridColumn = new DataGridColumn("video")		private var dgDataProvider:DataProvider = new DataProvider();				private var _searching:Boolean;		        private var _youtubeLoader:URLLoader;        private var _youtubeFeed:XML;        private var mrss:Namespace = new Namespace('http://search.yahoo.com/mrss/');		private var atom:Namespace = new Namespace("http://www.w3.org/2005/Atom")		private var yt:Namespace = new Namespace("http://gdata.youtube.com/schemas/2007")						// Initialization:		public function VideoBrowser() {			_youtubeLoader = new URLLoader()			_youtubeLoader.addEventListener(Event.COMPLETE,onYouTubeLoaded)						configUI()					}		// Public Methods:		// Protected Methods:		// Private Methods:		protected function configUI():void { 		    searching = false			search_btn.buttonMode = true			search_btn.addEventListener(MouseEvent.CLICK, trySearch)						videoColumn.headerRenderer = assets.VideoHeaderRenderer            videoColumn.sortable = false            videoColumn.cellRenderer = assets.VideoTitleCellRenderer                        data_grid.rowHeight = 90;			data_grid.setStyle('cellRenderer' ,VideoTitleCellRenderer)		    data_grid.addColumn(videoColumn);             data_grid.showHeaders = false;            data_grid.addEventListener(Event.CHANGE,onChange)            data_grid.dataProvider = dgDataProvider;            			//fakeData()		}		private function onChange(e:Event):void{			Debug.log('VideoBrowser.onChange: '+data_grid.selectedIndex)		}				private function fakeData():void{			trace('fakeData')			var dp:DataProvider = new DataProvider()			for(var i:int=0;i<10;i++){				var obj:VideoDataObject = new VideoDataObject()				var fk:Object = {name:'name',value:'value'};				dgDataProvider.addItem(obj)											}		}		private function trySearch(e:MouseEvent):void{			if(search_txt.length>0){				if(!_searching){					var evt:SearchYouTubeEvent = new SearchYouTubeEvent()					evt.data = search_txt.text;				///	evt.dispatch();					searching=true					startSearch()				}else{					searching=false				}							}		}		private function startSearch():void{			var gdataSearch:String = 'http://gdata.youtube.com/feeds/api/videos?max-results=50&q='			_youtubeLoader.load(new URLRequest(gdataSearch+search_txt.text))			trace(gdataSearch+search_txt.text)			clearList()		}		public function set searching(bool:Boolean):void{			_searching=bool			if(_searching){				Tweener.addTween(status_txt,{x:30,time:.3})				spinner.play()				search_btn.gotoAndStop('cancel')				status_txt.text = 'searching for: "'+search_txt.text+'"...'				status_txt.selectable = false;                spinner.visible = true                			}else{				Tweener.addTween(status_txt,{x:10,time:.3})				spinner.stop()				search_btn.gotoAndStop('search')				status_txt.text = 'Idle.'				status_txt.selectable = true;                spinner.visible = false			}		}		public function get searching():Boolean{			return _searching		}		private function onYouTubeLoaded(e:Event):void{			// Debug.log('onYouTubeLoaded: '+URLLoader(e.target).data)			 _youtubeFeed = XML(URLLoader(e.target).data)			 var arr:Array = _youtubeFeed.namespaceDeclarations()			 			 parseRSS(_youtubeFeed)						 			 		}				private function parseRSS(rssXML:XML):void {            default xml namespace = atom;		  	            var items:XMLList = rssXML.entry;			            var arr:Array = new Array();                        var len:uint = items.length();                                   for (var i:uint; i < len; i++) {				var obj:VideoDataObject = new VideoDataObject()				obj.title = items[i].title;				obj.description =items[i].title;								var thumb:XML = items[i].mrss::group.mrss::thumbnail[0];				obj.thumb = thumb.attributes()[0]								var description:XML = items[i].mrss::group.mrss::description[0];                obj.description = description.text()                                                               var playerV:XML = items[i].mrss::group.mrss::player[0];                var url:String = playerV.attributes()[0]                var vid:String = url.substr( url.search("v=")+2,12)                 obj.id = url                trace('vid: '+obj.id)              				try{					var video:XML = items[i].mrss::group.mrss::content[0];										if(video.attributes()[0]){					    obj.url = video.attributes()[0]					}else if(video.attributes()[2]){						obj.url = video.attributes()[1]					}else if(video.attributes()[3]){	                    obj.url = video.attributes()[2]	                }								}catch(err){					Debug.error('video stream not found @ '+obj.title)				}				               				dgDataProvider.addItem(obj)            }           searching = false        }                private function clearList():void{        	while( dgDataProvider.length>1){        		dgDataProvider.removeItemAt(0)        	}        }							}	}